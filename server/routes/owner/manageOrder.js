const express = require("express");
const router = express.Router();
const db = require("../../config/db");
const { verifyToken } = require("../../middleware/auth");

// Middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô
router.use(verifyToken);
const { getTodayRevenue } = require("./getTodayRevenue"); // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á)
const { getTodayCount } = require("./getTodayCount");

// ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
router.get("/all", verifyToken, async (req, res) => {
  try {
    const today = new Date().toLocaleDateString("sv-SE", {
      timeZone: "Asia/Bangkok",
    });

    const [rows] = await db.promise().query(
      `SELECT * FROM orders 
       WHERE DATE(order_time) = ?`,
      [today]
    );

    res.json({ orders: rows });
  } catch (error) {
    console.error("üî• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô backend:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
  }
});

router.get("/count", verifyToken, async (req, res) => {
  try {
    const count = await getTodayCount();

    const io = req.app.get("io");
    if (io) {
      io.emit("orderCountUpdated", { count });
    }

    return res.json({ count });
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    return res
      .status(500)
      .json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ" });
  }
});

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
router.get("/today-revenue", async (req, res) => {
  try {
    const today = new Date().toLocaleDateString("sv-SE", {
      timeZone: "Asia/Bangkok",
    });

    const [result] = await db.promise().query(
      `SELECT 
        COALESCE(SUM(total_price), 0) AS totalRevenue,
        COUNT(*) AS totalOrders
      FROM orders
      WHERE DATE(order_time) = ?
        AND status = 'completed'`,
      [today]
    );

    res.json({
      totalRevenue: parseFloat(result[0].totalRevenue) || 0,
      totalOrders: result[0].totalOrders,
      date: new Date().toLocaleDateString("th-TH"),
    });
  } catch (err) {
    console.error("Database error:", err);
    res.status(500).json({
      message: "‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
      error: err.message,
    });
  }
});

router.get("/:orderId", verifyToken, async (req, res) => {
  const orderId = req.params.orderId;

  // console.log("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå:", orderId);

  if (!orderId || isNaN(orderId)) {
    return res.status(400).json({
      message: "‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
      success: false,
    });
  }

  try {
    // ‡πÉ‡∏ä‡πâ LEFT JOIN ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ menu
    const [results] = await db.promise().query(
      `SELECT 
         oi.item_id,
         oi.order_id,
         oi.menu_id,
         COALESCE(m.menu_name, '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π') as menu_name,
         oi.quantity,
         oi.note,
         oi.specialRequest,
         oi.price,
         (oi.quantity * oi.price) as subtotal
       FROM order_items oi
       LEFT JOIN menu m ON oi.menu_id = m.menu_id
       WHERE oi.order_id = ?
       ORDER BY oi.item_id`,
      [orderId]
    );

    // console.log("‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£ query:", results);

    if (results.length === 0) {
      return res.status(404).json({
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ",
        success: false,
      });
    }

    res.json({
      success: true,
      items: results,
      orderId: parseInt(orderId),
      totalItems: results.length,
    });
  } catch (error) {
    console.error("üî• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô backend (orderId):", error);
    res.status(500).json({
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå",
      success: false,
      error: process.env.NODE_ENV === "development" ? error.message : undefined,
    });
  }
});

router.put("/:orderId/status", verifyToken, async (req, res) => {
  const orderId = Number(req.params.orderId);
  const { status } = req.body;

  if (!status) {
    return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" });
  }

  try {
    const [result] = await db
      .promise()
      .query("UPDATE orders SET status = ? WHERE order_id = ?", [
        status,
        orderId,
      ]);

    if (result.affectedRows === 0) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö order ‡∏ô‡∏µ‡πâ" });
    }

    
    if (status === "completed") {
      // ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å order ‡∏à‡∏≤‡∏Å orders ‚Üí pending_orders
      const [pendingOrderInsertResult] = await db.promise().query(
        `INSERT INTO pending_orders (order_code, table_number, order_time, status, total_price)
     SELECT order_code, table_number, order_time, status, total_price
     FROM orders WHERE order_id = ?`,
        [orderId]
      );

      const newPendingOrderId = pendingOrderInsertResult.insertId;

      // ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å order_items ‚Üí pending_order_items
      await db.promise().query(
        `INSERT INTO pending_order_items (pending_order_id, menu_id, quantity, price, note, specialRequest)
     SELECT ?, menu_id, quantity, price, note, specialRequest
     FROM order_items WHERE order_id = ?`,
        [newPendingOrderId, orderId]
      );

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á receipt ‡πÉ‡∏´‡∏°‡πà **‡∏ñ‡πâ‡∏≤ order_code ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô receipts**
      const [orderRows] = await db
        .promise()
        .query(`SELECT order_code FROM orders WHERE order_id = ?`, [orderId]);

      if (orderRows.length > 0) {
        const orderCode = orderRows[0].order_code;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ receipt_code ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        const [existingReceipt] = await db
          .promise()
          .query(`SELECT 1 FROM receipts WHERE receipt_code = ? LIMIT 1`, [
            orderCode,
          ]);

        if (existingReceipt.length === 0) {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÉ‡∏´‡πâ insert
          await db.promise().query(
            `INSERT INTO receipts (receipt_code, receipt_order_id)
         VALUES (?, ?)`,
            [orderCode, newPendingOrderId]
          );
        }
      }

      // ‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡∏ö orders/order_items ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á
    }

    const io = req.app.get("io");

    if (io) {
      try {
        // ‚úÖ ‡∏™‡πà‡∏á event ‡πÅ‡∏ö‡∏ö global (‡∏ó‡∏∏‡∏Å client ‡πÑ‡∏î‡πâ)
        io.emit("order_status_updated", { orderId, status });

        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ room ‡πÅ‡∏¢‡∏Å staff / owner ‚Äî ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÅ‡∏ó‡∏ô
        // io.to("staff-room").emit("order_status_updated", { orderId, status });
        // io.to("owner-room").emit("order_status_updated", { orderId, status });

        // üîÑ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (optional)
        const revenueData = await getTodayRevenue();
        io.emit("today_revenue_updated", revenueData);

        // üî¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô order ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
        const count = await getTodayCount();
        io.emit("orderCountUpdated", { count });
      } catch (ioErr) {
        console.error("‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• realtime ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", ioErr);
      }
    }

    // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö client
    res.json({
      message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      orderId,
      status,
      success: true,
    });
  } catch (err) {
    console.error("‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
    res
      .status(500)
      .json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå", success: false });
  }
});

module.exports = router;